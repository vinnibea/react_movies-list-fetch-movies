{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","utils/__helpers.ts","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","convertMovie","film","Title","Plot","imdbID","Poster","wait","delay","Promise","resolve","setTimeout","request","query","a","fetch","response","ok","reject","Error","json","FindMovie","getQuery","inputValue","findNewMovie","onFormSubmit","useState","createMovie","showErr","shouldShowError","isLoading","setLoading","handleClick","event","preventDefault","propperQuery","toLowerCase","trim","replace","nextMovie","Response","propperFilm","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","classNames","onClick","disabled","App","addMovies","newMovie","getNewMovie","updateMovieList","setUpdateMovieList","useEffect","currentMovies","newFilm","find","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f3f7690.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { Movie } from '../types/Movie';\nimport { MovieData } from '../types/MovieData';\n\nconst picture = 'https://via.placeholder.com/360x270.png';\n\nexport function convertMovie(film: MovieData): Movie {\n  const {\n    Title: title,\n    Plot: description,\n    imdbID: imdbId,\n    Poster: imgUrl,\n  } = film;\n\n  return {\n    title,\n    description,\n    imdbId,\n    imgUrl: imgUrl === 'N/A'\n      ? picture\n      : imgUrl,\n    // eslint-disable-next-line\n    imdbUrl: 'https://www.imdb.com/title/' + imdbId,\n  };\n}\n\nexport function convertQuery(title: string): string {\n  return title.toLowerCase()\n    .trim()\n    .replace(/[\\s]/gi, '+');\n}\n","import { MovieData } from './types/MovieData';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=1c6320fb';\n\nconst wait = (delay: number) => {\n  return new Promise(resolve => setTimeout(resolve, delay));\n};\n\nexport const request = async (query: string): Promise<MovieData> => {\n  await wait(1000);\n  const response = await fetch(`${API_URL}&t=${query}`);\n\n  if (!response.ok) {\n    Promise.reject(new Error(''));\n  }\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { convertMovie, convertQuery } from '../../utils/__helpers';\nimport { request } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype FindFilm = {\n  getQuery(film: string): void,\n  findNewMovie(film: MovieData): void,\n  onFormSubmit(setUpdate: boolean): void,\n  inputValue: string,\n};\n\nexport const FindMovie: React.FC<FindFilm> = ({\n  getQuery,\n  inputValue,\n  findNewMovie,\n  onFormSubmit,\n}) => {\n  const [movie, createMovie] = useState<Movie | null>(null);\n  const [showErr, shouldShowError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const handleClick = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setLoading(true);\n\n    const propperQuery: string = convertQuery(inputValue);\n    const nextMovie = await request(propperQuery);\n\n    if (nextMovie.Response !== 'False') {\n      const propperFilm: Movie = convertMovie(nextMovie);\n\n      createMovie(\n        propperFilm,\n      );\n\n      findNewMovie(\n        nextMovie,\n      );\n\n      setLoading(false);\n      shouldShowError(false);\n    } else {\n      shouldShowError(true);\n      createMovie(null);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          onFormSubmit(true);\n          getQuery('');\n          createMovie(null);\n          shouldShowError(false);\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={inputValue}\n              onChange={({ target }) => {\n                getQuery(target.value);\n                shouldShowError(false);\n              }}\n            />\n          </div>\n\n          <p className=\"help is-danger\" data-cy=\"errorMessage\">\n            {`${showErr ? 'Can`t find a movie with such a title' : ''}`}\n          </p>\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"button\"\n              className={classNames(\n                'button', 'is-light',\n                { 'is-loading': isLoading },\n              )}\n              onClick={(event) => {\n                handleClick(event);\n              }}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              data-cy=\"addButton\"\n              type=\"submit\"\n              className=\"button is-primary\"\n              disabled={movie === null}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\" data-cy=\"previewContainer\">\n        <h2 className=\"title\">Preview</h2>\n        {movie && showErr === false && <MovieCard movie={movie} />}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { MovieData } from './types/MovieData';\nimport { convertMovie } from './utils/__helpers';\n\nexport const App = () => {\n  const [movies, addMovies] = useState<Movie[]>([]);\n  const [query, getQuery] = useState('');\n  const [newMovie, getNewMovie] = useState<MovieData | null>(null);\n  const [updateMovieList, setUpdateMovieList] = useState(false);\n\n  useEffect(() => {\n    if (newMovie === null) {\n      return;\n    }\n\n    addMovies((currentMovies) => {\n      const newFilm = convertMovie(newMovie);\n      const checkImdbId\n        = currentMovies?.find(movie => movie.imdbId === newFilm.imdbId);\n\n      if (!checkImdbId) {\n        return ([\n          ...currentMovies,\n          newFilm,\n        ]);\n      }\n\n      return currentMovies;\n    });\n\n    setUpdateMovieList(false);\n  }, [updateMovieList]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {movies.length > 0 && <MoviesList movies={movies} />}\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          getQuery={getQuery}\n          inputValue={query}\n          findNewMovie={getNewMovie}\n          onFormSubmit={setUpdateMovieList}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}